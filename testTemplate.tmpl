{{define "main"}}
func TestGoSQLGen_{{.StructName}}(t *testing.T) {
	ctx := t.Context()
	var err error

	{{ .Tests }}

	}
{{end}}

{{define "getInsert"}}
t.Run("getInsert", func(t *testing.T) {
	{{ .Inserts }}

	// Get By Primary Keys
	gotByPk := {{.StructName}}{}
	err = gotByPk.{{.MethodGetByPrimaryKeys}}(ctx, testDb, {{ range .PrimaryKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.NoError(t, err)
	assert.Equal(t, {{.TableVarName}}, gotByPk)

	{{ if .BusinessKeys }}// Get By Business Keys
	gotByBk := {{.StructName}}{}
	err = gotByBk.{{.MethodGetByBusinessKeys}}(ctx, testDb, {{ range .BusinessKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.NoError(t, err)
	assert.Equal(t, {{.TableVarName}}, gotByBk)
	assert.Equal(t, gotByPk, gotByBk)
	{{ end }}
})
{{end}}

{{define "update"}}
t.Run("update", func(t *testing.T) {
	{{ .Inserts }}

	{{ .UpdatesPK }}
	err = {{.TableVarName}}.{{.MethodUpdateByPrimaryKeys}}(ctx, testDb)
	require.NoError(t, err)

	// Get By Primary Keys
	gotByPk := {{.StructName}}{}
	err = gotByPk.{{.MethodGetByPrimaryKeys}}(ctx, testDb, {{ range .PrimaryKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.NoError(t, err)
	assert.Equal(t, {{.TableVarName}}, gotByPk)

	{{ if .BusinessKeys }}// Get By Business Keys
	{{ .UpdatesBK }}
	err = {{.TableVarName}}.{{$.MethodUpdateByBusinessKeys}}(ctx, testDb)
	require.NoError(t, err)

	gotByBk := {{.StructName}}{}
	err = gotByBk.{{.MethodGetByBusinessKeys}}(ctx, testDb, {{ range .BusinessKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.NoError(t, err)
	assert.Equal(t, {{.TableVarName}}, gotByBk)
	{{ end }}
})
{{end}}

{{define "delete"}}
t.Run("delete", func(t *testing.T) {
	{{ .Inserts }}

	got := {{.StructName}}{}
	err = got.{{.MethodGetByPrimaryKeys}}(ctx, testDb, {{ range .PrimaryKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.NoError(t, err)
	assert.Equal(t, {{.TableVarName}}, got)

	err = got.delete(ctx, testDb)
	require.NoError(t, err)
	gotAfterDelete := {{ $.StructName }}{}
	err = gotAfterDelete.{{.MethodGetByPrimaryKeys}}(ctx, testDb, {{ range .PrimaryKeys }}{{$.TableVarName}}.{{.FieldName}},{{end}})
	require.Error(t, err)
})
{{end}}
