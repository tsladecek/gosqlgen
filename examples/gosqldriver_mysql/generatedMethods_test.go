// Generated by: github.com/tsladecek/gosqlgen

package gosqldrivermysql

import (
	"database/sql"
	"fmt"
	"reflect"
	"testing"

	"time"
)

var testDb *sql.DB

func logf(t *testing.T, format string, args ...any) {
	t.Logf("%s: %s", t.Name(), fmt.Sprintf(format, args...))
}

func assertEqual(t *testing.T, a, b any) {
	t.Helper()

	if reflect.DeepEqual(a, b) {
		return
	}

	logf(t, "objects not equal\nExpected\n\t%+v\nReceived\n\t%+v", a, b)
	t.Fail()
}

func requireNoError(t *testing.T, err error) {
	t.Helper()

	if err != nil {
		logf(t, "error should be nil: %v", err)
		t.FailNow()
	}
}

func requireError(t *testing.T, err error) {
	t.Helper()

	if err == nil {
		logf(t, "error should not be nil")
		t.FailNow()
	}
}

func TestGoSQLGen_Address(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		tbl_users_egflfjae := User{Id: "OadpyPYHgcyrI0hAFi1MdJUBT54lF6OC", Name: []byte(`AUYRNH7Qzo6LvaHQGkQtxeJBsc7jMKtn`), payload: []byte(`{"EKrioGhL":"cXQvaDIL", "GAU7PdSC":"fGaCCsZE"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_egflfjae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_bbbbdchb := Country{Id: "uX4YdLijsYPbvm2MQ4J2svTFCEHaKdYt", Name: "bDQYy5KH2iT5g8VCUxT1dlCwGmhotNe6", GPS: "lZN50E5aqtqQ2XXJExBfYs1MSOyCENea", Continent: "Asia"}
		err = tbl_countries_bbbbdchb.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_acfiabjk := Address{Id: "ICskGujDWWNRFhoAPjXPXiMzA5qPYr2c", Address: "iOw4p3pAjukgsCwPEe5YLwjehXxZs2zv", UserId: tbl_users_egflfjae.RawId, CountryId: tbl_countries_bbbbdchb.RawId}
		err = tbl_addresses_acfiabjk.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_acfiabjk.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByPk)

		// Get By Business Keys
		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_acfiabjk.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		tbl_users_bdgeclke := User{Id: "qFdiCGccyrITSmZSVQ8JwjScSMT42uaC", Name: []byte(`sgm3VKHNURgu1PETfLu73TLIW2jOqAZv`), payload: []byte(`{"YDj3SxN2":"bkM1hUiD", "MbX3d1tP":"wtqsZ4TV"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_bdgeclke.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_kgdkciec := Country{Id: "gU78oEhXvyV6w0vwUBuhLOD7ergBXIDF", Name: "tpX5hqtpx3RC8YQBhRhBZJGQ7Fmtwd0E", GPS: "MAbWkQaS6zNzjcldKHCaYVo16LfNUrq2", Continent: "Asia"}
		err = tbl_countries_kgdkciec.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_bffcgffb := Address{Id: "eeRhhr1XbLjFi1tsxmD3dDwzBS5S7T2V", Address: "3lWV6r1SMO1ZQUg8dsSAbiB4L5imOEEK", UserId: tbl_users_bdgeclke.RawId, CountryId: tbl_countries_kgdkciec.RawId}
		err = tbl_addresses_bffcgffb.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_cbajlhlg := User{Id: "QddfmTuozKbLJsZVTWPxAPq4IWF5gfHi", Name: []byte(`OjT3Y1NaLpD5LEx1m7Mx3R65A8kXxUV8`), payload: []byte(`{"AptL18ca":"pRf4ATeS", "7fhcRyWy":"V0PglS4I"}`), Age: sql.NullInt32{Valid: true, Int32: 0}, DrivesCar: sql.NullBool{Valid: true, Bool: false}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_cbajlhlg.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ibclkbdi := Country{Id: "I0dMp4SBklUMT1ApYQYGjFG4mzjX2TOn", Name: "ydabpZ5WgL6MgP4BvIf1Gkx1iATrfBUZ", GPS: "lidZ0gsLCVLICuAFTbI6nbFV3zL8AgXT", Continent: "Europe"}
		err = tbl_countries_ibclkbdi.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_bffcgffb.Id = "truo6Q2d0x8y37eCU3NUsJGQWkcpxJAN"
		tbl_addresses_bffcgffb.Address = "PytXexpxWwMIZKi8YpqBioY6LXBq1cBI"
		tbl_addresses_bffcgffb.UserId = tbl_users_cbajlhlg.RawId
		tbl_addresses_bffcgffb.CountryId = tbl_countries_ibclkbdi.RawId // Update By Primary Keys
		err = tbl_addresses_bffcgffb.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_bffcgffb.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_bffcgffb, gotByPk)

		// Update By Business Keys
		tbl_users_djgafeal := User{Id: "xckscutaHpEiGBt7qc0hEfN3CKdjLWp1", Name: []byte(`PLRMwIdAoV32YzoT7DBIcpHGWwUCCMJu`), payload: []byte(`{"piKXuXFg":"lY3R8WhN", "ovM40OHM":"BRuTLRzL"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_djgafeal.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ljfbajhb := Country{Id: "H3K2xVNUmCGbFOduFdmuS22Aeo7GT5W4", Name: "Q7xWp84Jy85PwwgGNGDeIHQFeKZ1Mk80", GPS: "EGlkVQtwBZzNxdY7PxMEm4stnlcETnXF", Continent: "Asia"}
		err = tbl_countries_ljfbajhb.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_bffcgffb.Id = "uFOkWWyGJXsLGObZIsDLIxXA3uHkV6dI"
		tbl_addresses_bffcgffb.Address = "TUCJ6NJtbYuWNjM7mozi4Jj7NWFEXmIq"
		tbl_addresses_bffcgffb.UserId = tbl_users_djgafeal.RawId
		tbl_addresses_bffcgffb.CountryId = tbl_countries_ljfbajhb.RawId
		err = tbl_addresses_bffcgffb.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_bffcgffb.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_bffcgffb, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		tbl_users_dlhbbgii := User{Id: "HS4DrRrTgXzhDN4EQ7aFPalM34FBgs3v", Name: []byte(`i5ZaVtB5ovWdUVSMOd7dyYG38ZECsqfc`), payload: []byte(`{"pLSNqejY":"vmNrFxHZ", "XTtdWJ6v":"7oGYwmS7"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_dlhbbgii.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_fbajagjg := Country{Id: "k5xJSM7vShEzd6wgS3VQR6kK6gxoRRg4", Name: "Ntl1M4i6kz4VxfcJrdz3WWkR73coJQ1V", GPS: "mna7RKs7etEZ7n7DzfIF2Ye3agmcoArC", Continent: "Asia"}
		err = tbl_countries_fbajagjg.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_adglkdkh := Address{Id: "H3kYAoxLPlxHAW6C0t5oE7QAOOcCjNTk", Address: "CJZ4lAkkAk3R6qywiKjDqFE1YphSBdE3", UserId: tbl_users_dlhbbgii.RawId, CountryId: tbl_countries_fbajagjg.RawId}
		err = tbl_addresses_adglkdkh.insert(ctx, testDb)
		requireNoError(t, err)

		got := Address{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_adglkdkh.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_adglkdkh, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Address{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_adglkdkh.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_AddressBook(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		tbl_users_kgcjaiel := User{Id: "cu1orMaFOzQmuvAFFSMXjWlDqjJpgvtV", Name: []byte(`gOQaYmxJnBVVnwI4CbnL5jEDKXztlCTH`), payload: []byte(`{"bccOnFWn":"AiSbnWsh", "9vzHxtzM":"rHlwF5GO"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_kgcjaiel.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_jgggbkif := Country{Id: "yYXftEGhPWzwP3SycIMEuBqtWwQe2uft", Name: "CAcbRLhgLPS6blR36OZjoRiCjBQ60yFz", GPS: "EzHEYx4TyXWP8PazLTolXbf8dFKCs2mW", Continent: "Asia"}
		err = tbl_countries_jgggbkif.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_kkjafcjc := Address{Id: "Nc6APYDzeRDvt4KVirTYv27DNCLldOnB", Address: "qFZjTAODfdOLcl1bw6ycpYc5v1heEsX2", UserId: tbl_users_kgcjaiel.RawId, CountryId: tbl_countries_jgggbkif.RawId}
		err = tbl_addresses_kkjafcjc.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_lkicaffa := AddressBook{Id: "c3SDA8M4h2cg1rnNa2STfAuqZyYEN3Zz", AddressId: tbl_addresses_kkjafcjc.RawId}
		err = tbl_addresses_book_lkicaffa.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_lkicaffa.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_lkicaffa, gotByPk)

		// Get By Business Keys
		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_lkicaffa.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_lkicaffa, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		tbl_users_gkgkiclf := User{Id: "YCBUXNEXNMyXS6GEgVaQ8UWSZ6c7auS1", Name: []byte(`PJWTd1GZsovaA2J2Y7ESZUqzWLYCdJKe`), payload: []byte(`{"LnTSMhB1":"vSXhWNPH", "yUoA7tat":"P5rxVqDE"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_gkgkiclf.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_fcggejgf := Country{Id: "AIRVw2cYqjsZqNx1hXZtLBIXbeUbIQzr", Name: "uHjddDO5CnNoM60B5t8KZuLhObBe5vVj", GPS: "QZxI2PKAVEVeKWPMa7Lya5KQC7HHnRGG", Continent: "Asia"}
		err = tbl_countries_fcggejgf.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_echhahkb := Address{Id: "6bTMbjNwLfEMQPhpfo4V0OJVXY3qY4Yp", Address: "wn1lA2J0fcFsQjL5KSbUHkg2BOqELvRT", UserId: tbl_users_gkgkiclf.RawId, CountryId: tbl_countries_fcggejgf.RawId}
		err = tbl_addresses_echhahkb.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_lhgbkiib := AddressBook{Id: "MxEWHevNJ8LqFrFpO4xYnyptemuf6fUs", AddressId: tbl_addresses_echhahkb.RawId}
		err = tbl_addresses_book_lhgbkiib.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_eiacikdc := User{Id: "BhBdWFJz2qsJUiMuqzYvxICRFDPIvbAw", Name: []byte(`falQai2t0YwZEEd1110S4ZD3N1eEUFqn`), payload: []byte(`{"j3NCXFsf":"MP4c7X2v", "cXXBgHw7":"H8J4xOr2"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_eiacikdc.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_fhidbgba := Country{Id: "UT5I5iZSspbiFbEL5t0YcZjdscuTbuUo", Name: "AJrMndSMELnHHECcPJG7JLJJQqbORcPi", GPS: "SXvPUwZiyEJgxKJPYO5aOkigZEs0QGJ6", Continent: "Asia"}
		err = tbl_countries_fhidbgba.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_kgbajbeh := Address{Id: "1QzXpEK2jnmS5crP3WY8Fz4FgeKSblpw", Address: "OZDpmRrSHoVJ8OvT88Gvzr3DmahHV5ng", UserId: tbl_users_eiacikdc.RawId, CountryId: tbl_countries_fhidbgba.RawId}
		err = tbl_addresses_kgbajbeh.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_lhgbkiib.Id = "u66dlKLpaMVJ7nGMDXp8pKfMuuMamZxs"
		tbl_addresses_book_lhgbkiib.AddressId = tbl_addresses_kgbajbeh.RawId // Update By Primary Keys
		err = tbl_addresses_book_lhgbkiib.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_lhgbkiib.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_lhgbkiib, gotByPk)

		// Update By Business Keys
		tbl_users_celachlf := User{Id: "3rRegersr1IyM8dF5irQjsEyGQ1SBkqh", Name: []byte(`ebMfYnjMUKT3gotmbTocfLlWwD3KtvHn`), payload: []byte(`{"estEzSXU":"pkjkCO55", "BoKpSRqu":"MLQnUify"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_celachlf.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_cceagcda := Country{Id: "8OarTcgj73DVMpqhK4CSoVJnY6eaWBIB", Name: "arkhNlPSan56i1QW5ECi3icSfFg0uS4m", GPS: "0uMZU2PkDzSACOyJkwQjHR5k38U3mpRb", Continent: "Asia"}
		err = tbl_countries_cceagcda.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_ilkchieh := Address{Id: "A0rHBiprhnImdGcc5Eb8nWRABVuzp8vs", Address: "HgUdLPyl64YExEWs1rnmp4pDem56pFiY", UserId: tbl_users_celachlf.RawId, CountryId: tbl_countries_cceagcda.RawId}
		err = tbl_addresses_ilkchieh.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_lhgbkiib.Id = "WhSRVJHTwa26u8ulxwGJFq4DMkOB0NIY"
		tbl_addresses_book_lhgbkiib.AddressId = tbl_addresses_ilkchieh.RawId
		err = tbl_addresses_book_lhgbkiib.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_lhgbkiib.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_lhgbkiib, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		tbl_users_eejkjdkj := User{Id: "dn8xFJekHxj0407diuDBJj5QASiTOrtC", Name: []byte(`y5CrcPoR2gigWzi7SO3CH2MfCYhBvupV`), payload: []byte(`{"OBNqnH9N":"nubSdkYk", "gsIFLsNB":"mO7pG6ox"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_eejkjdkj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ahjafhcg := Country{Id: "FLBLERtRK0ne65khXZ14WMACsSZzdPq5", Name: "0kVl8iHo0r738NGLV3DduR7PzMHfoEaW", GPS: "I2Rj5wrnEAWtUHzOxVQmfHlgqU3SwI1i", Continent: "Asia"}
		err = tbl_countries_ahjafhcg.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_kjeebiee := Address{Id: "yRuIj42x3oibXP8mlNveUE3WsQvyVcdy", Address: "cHzcF5MCypgKWCfPLhOFcE4WyImRWF4k", UserId: tbl_users_eejkjdkj.RawId, CountryId: tbl_countries_ahjafhcg.RawId}
		err = tbl_addresses_kjeebiee.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_aabiaikb := AddressBook{Id: "t33D4oO818VTbna75jVK3Z5CfpRtzwRV", AddressId: tbl_addresses_kjeebiee.RawId}
		err = tbl_addresses_book_aabiaikb.insert(ctx, testDb)
		requireNoError(t, err)

		got := AddressBook{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_aabiaikb.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_aabiaikb, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := AddressBook{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_aabiaikb.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_Country(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		tbl_countries_fadjahfk := Country{Id: "4rtJcYGfP4FAv8txA3v7qGq4Cxsn1LZP", Name: "XE8u5zq1UjnMahbp13CyPGR8RhPeIDqW", GPS: "xKR0ctVTiGyN6uy3fWuYXOiwidysaKp2", Continent: "Asia"}
		err = tbl_countries_fadjahfk.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_fadjahfk.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_fadjahfk, gotByPk)

		// Get By Business Keys
		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_fadjahfk.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_fadjahfk, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		tbl_countries_iidkkhbf := Country{Id: "fjNE1D35GSvvxCUHYuZFDBgsXOQGSDwK", Name: "PQGYNGGrljPjEOK1n6Brbq3LxRWjGVkh", GPS: "JKMHqnQSwj6bfwL2MXLi2d7MOTB7NDs3", Continent: "Asia"}
		err = tbl_countries_iidkkhbf.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_countries_iidkkhbf.Id = "cATW5neCf7KpxC8h8yOxXyQCOEXg13Ne"
		tbl_countries_iidkkhbf.Name = "g0VHSpCqknoRdfuTwQC53gCLxbrKLvBZ"
		tbl_countries_iidkkhbf.GPS = "ZyC20ScWBsu8xxQUtUpoaltJL2O17n68"
		tbl_countries_iidkkhbf.Continent = "Europe" // Update By Primary Keys
		err = tbl_countries_iidkkhbf.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_iidkkhbf.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_iidkkhbf, gotByPk)

		// Update By Business Keys
		tbl_countries_iidkkhbf.Id = "RnbypOGHoWE1ryZekwFzRoHXshrdOQwK"
		tbl_countries_iidkkhbf.Name = "JbOCML46DKEBu0Tmde8HA2Ax0IcZRUgS"
		tbl_countries_iidkkhbf.GPS = "fzBq4tsJZcM10K5aAwpMl56zrOf1MFiF"
		tbl_countries_iidkkhbf.Continent = "Asia"
		err = tbl_countries_iidkkhbf.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_iidkkhbf.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_iidkkhbf, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		tbl_countries_dkgecbbl := Country{Id: "i6h0nKarIKLIu0WHVW3Oj1P6AcNo8OHN", Name: "qqRH6Ob6dUswNqDjvoaMD8S0eDqJpLxJ", GPS: "fTTCFCyNDv4XAYBvQDy6aJwgMXJAnEhH", Continent: "Asia"}
		err = tbl_countries_dkgecbbl.insert(ctx, testDb)
		requireNoError(t, err)

		got := Country{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_countries_dkgecbbl.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_dkgecbbl, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Country{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_countries_dkgecbbl.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_User(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		tbl_users_kkcdfbba := User{Id: "WgVGHRgFJaJ4UhMm84zPkqvNdmXYH2jB", Name: []byte(`wdejH1y5GnwQR3SjXqsDBe6XscTRf5rf`), payload: []byte(`{"4kPq4RFO":"xI3M7NST", "6JgDl9f9":"dpDWTCcV"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_kkcdfbba.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_kkcdfbba.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_kkcdfbba, gotByPk)

		// Get By Business Keys
		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_kkcdfbba.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_kkcdfbba, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		tbl_users_dcjfhhfe := User{Id: "c8IqqJL7ZOzsbZyKDywjE7uh5qgdr0rV", Name: []byte(`6tQt6U4BExu1rKxQx2RunGuKnr1Hq2nL`), payload: []byte(`{"IxjCf8SV":"HWPTmhIG", "fBTW96JU":"6EebQp8P"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_dcjfhhfe.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_dcjfhhfe.Id = "JsWmp0SsUJTcS6iLZ0YTafFctFsUrCn2"
		tbl_users_dcjfhhfe.Name = []byte(`7iwQ0aMDqsWaTqUtrPY0226mfeFdcXnc`)
		tbl_users_dcjfhhfe.payload = []byte(`{"tj0wv9FO":"zmu6JPWi", "Rhlt2FMH":"tGddegzO"}`)
		tbl_users_dcjfhhfe.Age = sql.NullInt32{Valid: true, Int32: 0}
		tbl_users_dcjfhhfe.DrivesCar = sql.NullBool{Valid: true, Bool: false}
		tbl_users_dcjfhhfe.Birthday = sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}
		tbl_users_dcjfhhfe.Registered = time.Now().UTC().Truncate(time.Second) // Update By Primary Keys
		err = tbl_users_dcjfhhfe.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_dcjfhhfe.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_dcjfhhfe, gotByPk)

		// Update By Business Keys
		tbl_users_dcjfhhfe.Id = "1z5WT0EJdjVDEMmXCD4vGMbac5X7kBX4"
		tbl_users_dcjfhhfe.Name = []byte(`X0ieepjlyrUHiqRJYHWbImOYDtByv04k`)
		tbl_users_dcjfhhfe.payload = []byte(`{"6UnqdQ1C":"zCheMyYy", "fMY2L6Ru":"EsgAKcK2"}`)
		tbl_users_dcjfhhfe.Age = sql.NullInt32{Valid: true, Int32: 1}
		tbl_users_dcjfhhfe.DrivesCar = sql.NullBool{Valid: true, Bool: true}
		tbl_users_dcjfhhfe.Birthday = sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}
		tbl_users_dcjfhhfe.Registered = time.Now().UTC().Truncate(time.Second)
		err = tbl_users_dcjfhhfe.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_dcjfhhfe.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_dcjfhhfe, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		tbl_users_ebhfkjfe := User{Id: "pfc2WjTg724hPVekQT7yn3xf2Vht2M7k", Name: []byte(`qEWnFz6uMGbSicO6t72TJZWQ74ztTlwm`), payload: []byte(`{"mfuvw2Cd":"JBinMJ8F", "vdxUJbVE":"QNeWPMa1"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullTime{Valid: true, Time: time.Now().UTC().Truncate(time.Second)}, Registered: time.Now().UTC().Truncate(time.Second)}
		err = tbl_users_ebhfkjfe.insert(ctx, testDb)
		requireNoError(t, err)

		got := User{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_users_ebhfkjfe.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_ebhfkjfe, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := User{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_users_ebhfkjfe.RawId)
		requireError(t, err)
	})

}
