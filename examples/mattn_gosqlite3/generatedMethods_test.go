// Generated by: github.com/tsladecek/gosqlgen

package mattngosqlite3

import (
	"database/sql"
	"fmt"
	"reflect"
	"testing"

	"time"
)

func logf(t *testing.T, format string, args ...any) {
	t.Helper()

	t.Logf("%s: %s", t.Name(), fmt.Sprintf(format, args...))
}

func assertEqual(t *testing.T, a, b any) {
	t.Helper()

	if reflect.DeepEqual(a, b) {
		return
	}

	logf(t, "objects not equal\nExpected\n\t%+v\nReceived\n\t%+v", a, b)
	t.Fail()
}

func requireNoError(t *testing.T, err error) {
	t.Helper()

	if err != nil {
		logf(t, "error should be nil: %v", err)
		t.FailNow()
	}
}

func requireError(t *testing.T, err error) {
	t.Helper()

	if err == nil {
		logf(t, "error should not be nil")
		t.FailNow()
	}
}

func TestGoSQLGen_Address(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_egflfjae := User{Id: `OadpyPYHgcyrI0hAFi1MdJUBT54lF6OC`, Name: []byte(`AUYRNH7Qzo6LvaHQGkQtxeJBsc7jMKtn`), payload: []byte(`{"EKrioGhL":"cXQvaDIL", "GAU7PdSC":"fGaCCsZE"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_egflfjae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_keghalfd := Country{Id: `bDQYy5KH2iT5g8VCUxT1dlCwGmhotNe6`, Name: `lZN50E5aqtqQ2XXJExBfYs1MSOyCENea`, GPS: `Yj173JTmXMXb8PIZf1uajtHmJU3WQqvl`, Continent: `Asia`}
		err = tbl_countries_keghalfd.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_acfiabjk := Address{Id: `ICskGujDWWNRFhoAPjXPXiMzA5qPYr2c`, Address: `iOw4p3pAjukgsCwPEe5YLwjehXxZs2zv`, UserId: tbl_users_egflfjae.RawId, CountryId: tbl_countries_keghalfd.RawId, IPV4: `230.37.86.251`, IPV6: `e567:c045:1ed9:e3f8:c54f:ad3d:6a89:3af3`}
		err = tbl_addresses_acfiabjk.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_acfiabjk.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByPk)

		// Get By Business Keys
		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_acfiabjk.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_laakdgaj := User{Id: `FWgnFCy66yR3ksE5xESxHNjekTNLMAbW`, Name: []byte(`HBr8pjoWXwwOPDhjpRywKBWRioyItruo`), payload: []byte(`{"ADzdEZDY":"DJxFfKER", "03UmQc0s":"BTOPMD0p"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_laakdgaj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_kidhjbah := Country{Id: `Y1NaLpD5LEx1m7Mx3R65A8kXxUV8i2BO`, Name: `XFw8IPdSpH3y4JluojvynGjz2kTvNoJ2`, GPS: `acjqI0dMp4SBklUMT1ApYQYGjFG4mzjX`, Continent: `Asia`}
		err = tbl_countries_kidhjbah.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_eafjibdf := Address{Id: `J8AkfeiB02Ic8vQ4KQbeJHQvrqxfX7w0`, Address: `XIDFYTwqBqzavcmMvbkeVjQyi83CeT7j`, UserId: tbl_users_laakdgaj.RawId, CountryId: tbl_countries_kidhjbah.RawId, IPV4: `153.185.114.189`, IPV6: `ea79:a565:7258:f42f:b886:b3d6:f0e2:decc`}
		err = tbl_addresses_eafjibdf.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_glahieda := User{Id: `bYuWNjM7mozi4Jj7NWFEXmIqzN3iuTQt`, Name: []byte(`xckscutaHpEiGBt7qc0hEfN3CKdjLWp1`), payload: []byte(`{"mxmmNxzz":"Jc04ytW8", "YUTO1QoC":"qCKi7ZaT"}`), Age: sql.NullInt32{Valid: true, Int32: 0}, DrivesCar: sql.NullBool{Valid: true, Bool: false}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_glahieda.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ljfbajhb := Country{Id: `H3K2xVNUmCGbFOduFdmuS22Aeo7GT5W4`, Name: `Q7xWp84Jy85PwwgGNGDeIHQFeKZ1Mk80`, GPS: `EGlkVQtwBZzNxdY7PxMEm4stnlcETnXF`, Continent: `Europe`}
		err = tbl_countries_ljfbajhb.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_eafjibdf.Address = `iizsWuo2VjeqAxlukHG6oq0vn8FJ6OQo`
		tbl_addresses_eafjibdf.UserId = tbl_users_glahieda.RawId
		tbl_addresses_eafjibdf.CountryId = tbl_countries_ljfbajhb.RawId
		tbl_addresses_eafjibdf.IPV4 = `192.39.210.95`
		tbl_addresses_eafjibdf.IPV6 = `efe3:f6bb:c3c1:cf68:6675:0c14:1cdf:31e4` // Update By Primary Keys
		err = tbl_addresses_eafjibdf.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_eafjibdf.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_eafjibdf, gotByPk)

		// Update By Business Keys
		tbl_users_cgheiada := User{Id: `lAkkAk3R6qywiKjDqFE1YphSBdE3ojaI`, Name: []byte(`flDAHS4DrRrTgXzhDN4EQ7aFPalM34FB`), payload: []byte(`{"SmO6ArrF":"BPo8JkRg", "mSi7wlwC":"PuW8iI8U"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_cgheiada.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_kiclfbaj := Country{Id: `V1y4k5xJSM7vShEzd6wgS3VQR6kK6gxo`, Name: `uKlKNtl1M4i6kz4VxfcJrdz3WWkR73co`, GPS: `VPbbmna7RKs7etEZ7n7DzfIF2Ye3agmc`, Continent: `Asia`}
		err = tbl_countries_kiclfbaj.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_eafjibdf.Address = `p2OMH3kYAoxLPlxHAW6C0t5oE7QAOOcC`
		tbl_addresses_eafjibdf.UserId = tbl_users_cgheiada.RawId
		tbl_addresses_eafjibdf.CountryId = tbl_countries_kiclfbaj.RawId
		tbl_addresses_eafjibdf.IPV4 = `31.251.126.126`
		tbl_addresses_eafjibdf.IPV6 = `a320:1bdc:7227:7567:7512:53a8:de08:ac93`
		err = tbl_addresses_eafjibdf.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_eafjibdf.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_eafjibdf, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_dfakhbeg := User{Id: `Pu3flnc2ScZVJqagrYockYtU2bO3dBel`, Name: []byte(`TsQ1S1AC5MpeKhbG4IC5ZqxAIl8HuKoP`), payload: []byte(`{"RqcdvnK9":"XAx3Twew", "IdXAIWXc":"GjiAvgzo"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_dfakhbeg.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ffacllfi := Country{Id: `hvdGGh7TQ0mJcunovO0n0L2rkSUb1xIu`, Name: `Qgca0Ap7rTqBDeZHWACouKKANDfxW4ly`, GPS: `MKtYrKvtOcFCBzExhQSXss1X4x35ZCPL`, Continent: `Asia`}
		err = tbl_countries_ffacllfi.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_gadejdjh := Address{Id: `pd4lcCH7YwUYYjpNIgQ5pbApAQitOzy0`, Address: `7FEgcLVNnEpwvZfIkfk4fXDkmBHPBrPc`, UserId: tbl_users_dfakhbeg.RawId, CountryId: tbl_countries_ffacllfi.RawId, IPV4: `32.60.2.167`, IPV6: `b731:329d:8375:fd1d:02e4:d206:39f9:d651`}
		err = tbl_addresses_gadejdjh.insert(ctx, testDb)
		requireNoError(t, err)

		got := Address{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_gadejdjh.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_gadejdjh, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Address{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_gadejdjh.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_AddressBook(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_lckjibab := User{Id: `lX5GXseVW4WlQ6iE8LP2qdu0QrRxEUQO`, Name: []byte(`m1MBCNO6SMIst0lKpBiZmveCraLa5ukb`), payload: []byte(`{"ahVBhxgI":"c67BRZQH", "leAXF9Q9":"TX2jdu45"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_lckjibab.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_hahaaldj := Country{Id: `F8ohaMP53FvTWyT0fl5etWggJ5pCyJQ2`, Name: `Oeu23j644LwKd0Gojx4I8yNyGAQs1dQX`, GPS: `FQXu1x6wmpszDOMwxkvqvGqHt8G1hDHM`, Continent: `Asia`}
		err = tbl_countries_hahaaldj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_ciecefah := Address{Id: `Z35kGqMNXjt5iUtm1SYXzJCIFrk6rTOJ`, Address: `KrMA2evzJvbA0DxTuyROyLVY5LAgUeOH`, UserId: tbl_users_lckjibab.RawId, CountryId: tbl_countries_hahaaldj.RawId, IPV4: `69.151.130.218`, IPV6: `090a:2356:c41c:e5e4:898d:fe3c:8ee4:02ee`}
		err = tbl_addresses_ciecefah.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_gkhlbkei := AddressBook{Id: `MZCt2Ch1z83pmo7zwDsaRTF5xA1I08I6`, AddressId: tbl_addresses_ciecefah.RawId}
		err = tbl_addresses_book_gkhlbkei.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_gkhlbkei.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_gkhlbkei, gotByPk)

		// Get By Business Keys
		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_gkhlbkei.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_gkhlbkei, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_dikaafic := User{Id: `d5RAVMMnDmJMMK2YmSDtFdv6OjVL4Rel`, Name: []byte(`NQasYZWn8OarTcgj73DVMpqhK4CSoVJn`), payload: []byte(`{"HRAPoNkv":"4SbaNLaE", "f7j8HFHA":"HkDpXuS8"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_dikaafic.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_fcflkidg := Country{Id: `EbkUXNxTdWQFauxcqzj6N7WtmUtcLBG7`, Name: `fpRtzwRVbkjlG7EqfqpDC8tqwGiIvQro`, GPS: `lNveUE3WsQvyVcdyZXxWXdzPQ1RvC6kI`, Continent: `Asia`}
		err = tbl_countries_fcflkidg.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_dillffdh := Address{Id: `rGChQIrA3rRegersr1IyM8dF5irQjsEy`, Address: `NEmfH1BPebMfYnjMUKT3gotmbTocfLlW`, UserId: tbl_users_dikaafic.RawId, CountryId: tbl_countries_fcflkidg.RawId, IPV4: `192.137.21.25`, IPV6: `1d36:2ce7:4ef0:e16d:5527:405a:8236:b30d`}
		err = tbl_addresses_dillffdh.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_gkbgfllf := AddressBook{Id: `nvhXgEYQHgUdLPyl64YExEWs1rnmp4pD`, AddressId: tbl_addresses_dillffdh.RawId}
		err = tbl_addresses_book_gkbgfllf.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_ghbhaccd := User{Id: `WMACsSZzdPq5DIEiHhYwXDmNTnK5n61P`, Name: []byte(`uR7PzMHfoEaWegI3PvEX1DiyllUkIuk3`), payload: []byte(`{"FvittoaY":"PvWFjH81", "2Z4CIdgm":"CsRaG5jr"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_ghbhaccd.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_hhajcbae := Country{Id: `W5jwVk4MzQBSjNiNCiegV1yvn7XHpHYP`, Name: `weulSBBHKrFwoOuxNkPxkID78a7bcyvO`, GPS: `40UaeGNOedNtDUnF3urt0sBtpDm0aF6e`, Continent: `Asia`}
		err = tbl_countries_hhajcbae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_jjaakdhl := Address{Id: `H2MfCYhBvupVTUM4ZmlaDQ22fwYH822O`, Address: `uZSCQG4CLtyHFsalpLqce2hi05oyMmPx`, UserId: tbl_users_ghbhaccd.RawId, CountryId: tbl_countries_hhajcbae.RawId, IPV4: `167.23.135.250`, IPV6: `515d:8d2d:38f3:2ea1:b3dd:580a:feaa:b2ba`}
		err = tbl_addresses_jjaakdhl.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_gkbgfllf.AddressId = tbl_addresses_jjaakdhl.RawId // Update By Primary Keys
		err = tbl_addresses_book_gkbgfllf.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_gkbgfllf.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_gkbgfllf, gotByPk)

		// Update By Business Keys
		tbl_users_fckehkae := User{Id: `L3RDwxVdCDAqTwoKEvXb6YBQuHd6La1q`, Name: []byte(`xJSJUJAVj1m0HpymrThD0fsbRHUanmiD`), payload: []byte(`{"RzjJskGt":"XhxTpzcu", "pvRyb7kK":"o1Q4rqvI"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_fckehkae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_bbaeaelb := Country{Id: `zdPfblUXEsKXJcSr0PavKdRi47OdEmSE`, Name: `Anqob6U30Ty5pJqbDddR86ciem7ZMa7I`, GPS: `RixQuurA7r0Qek6bdCbVytX2WaGpQpNZ`, Continent: `Asia`}
		err = tbl_countries_bbaeaelb.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_hfacajge := Address{Id: `ZWc1TJoibLwplcTXhggzd3ij7PTciYzV`, Address: `OBAZ8DEG4HMazcVf7b1Bb5ivAAohOTth`, UserId: tbl_users_fckehkae.RawId, CountryId: tbl_countries_bbaeaelb.RawId, IPV4: `195.243.85.242`, IPV6: `752f:5f55:4e11:05f7:c9d5:e8fe:036e:a941`}
		err = tbl_addresses_hfacajge.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_gkbgfllf.AddressId = tbl_addresses_hfacajge.RawId
		err = tbl_addresses_book_gkbgfllf.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_gkbgfllf.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_gkbgfllf, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_hcfdglfa := User{Id: `mOn1xKR0ctVTiGyN6uy3fWuYXOiwidys`, Name: []byte(`ZKtEFtSw1TJBPAxYZfvEEIs52ZyFIiaW`), payload: []byte(`{"Awlt9C96":"tqZLnDeV", "AAzxOQNP":"JuHQDUS3"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_hcfdglfa.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_akblabig := Country{Id: `Bir7nGMm1WUZ83NjeJfOjW2TRU4HW2rX`, Name: `SDwKbClabPyOwA7u1MBbMbDrma0QqOMN`, GPS: `GVkhYJUKKC375P624PXZhSpcq3vfxF2j`, Continent: `Asia`}
		err = tbl_countries_akblabig.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_gkkgdjbj := Address{Id: `OdQPdR3NqF5i4rtJcYGfP4FAv8txA3v7`, Address: `BCMlAxB5rOoMXE8u5zq1UjnMahbp13Cy`, UserId: tbl_users_hcfdglfa.RawId, CountryId: tbl_countries_akblabig.RawId, IPV4: `66.5.122.103`, IPV6: `a4a6:b9a8:20ed:c8d1:97b0:ed10:42f2:075d`}
		err = tbl_addresses_gkkgdjbj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_kakifgbf := AddressBook{Id: `BAeALKvQ7T4xZIoXvdNVF4tYhpJJD3q5`, AddressId: tbl_addresses_gkkgdjbj.RawId}
		err = tbl_addresses_book_kakifgbf.insert(ctx, testDb)
		requireNoError(t, err)

		got := AddressBook{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_kakifgbf.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_kakifgbf, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := AddressBook{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_kakifgbf.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_Country(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_dbhjfhcl := Country{Id: `52f8zhsLDmfw3S11Tb63Kl6PlpaDI3Ls`, Name: `3AjTpn4ojAIL7Bdh4zIWcrZ0aegLNLBY`, GPS: `pgPm6Eii8cpCKGRSAxUYrxGQARp12NoK`, Continent: `Asia`}
		err = tbl_countries_dbhjfhcl.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_dbhjfhcl.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_dbhjfhcl, gotByPk)

		// Get By Business Keys
		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_dbhjfhcl.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_dbhjfhcl, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_chhbdllg := Country{Id: `w5CPoPLFXQc6snoBjyFrgqys2VNvkddi`, Name: `HVWnu101fwIHqVDRXuTbiFamvf4R2YXh`, GPS: `fQ3Y7Svxt3BWp3MWwY0qWX4w5EA5dQNc`, Continent: `Asia`}
		err = tbl_countries_chhbdllg.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_countries_chhbdllg.Name = `ZXKebcIJkgtMK6gFpVv2iUUCGFmNVUvT`
		tbl_countries_chhbdllg.GPS = `b1rzUUsceaddDy5nluGobZXUqCM5HqoD`
		tbl_countries_chhbdllg.Continent = `Europe` // Update By Primary Keys
		err = tbl_countries_chhbdllg.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_chhbdllg.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_chhbdllg, gotByPk)

		// Update By Business Keys
		tbl_countries_chhbdllg.Name = `bUCkgxxWiqNHrA6tKxzdK0aLehmRJ38c`
		tbl_countries_chhbdllg.GPS = `1fbN2JfqBTKYyyzzpmMERwPuQlDUrclY`
		tbl_countries_chhbdllg.Continent = `Asia`
		err = tbl_countries_chhbdllg.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_chhbdllg.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_chhbdllg, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_ealkcchh := Country{Id: `qHaoll8VwcAbVLu7cyDjBEkGWlQfIsi7`, Name: `YE143Z3QSNqlU1PDZrpuqqH3ZdOx1Lg2`, GPS: `rZzwRHXhMBS1UVFSTLZ8r0FqsZWmjT0s`, Continent: `Asia`}
		err = tbl_countries_ealkcchh.insert(ctx, testDb)
		requireNoError(t, err)

		got := Country{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_countries_ealkcchh.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_ealkcchh, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Country{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_countries_ealkcchh.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_User(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_gcikdcdd := User{Id: `gwfpWBm2CUzSsqPVEzY8cKf6zgFTYXs6`, Name: []byte(`xdVfPFSyKHjRNJrzY4dW6v6WQS0MXfu8`), payload: []byte(`{"yjoqhgHZ":"ffoajaJC", "d748MfNP":"MKELFxDV"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_gcikdcdd.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_gcikdcdd.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_gcikdcdd, gotByPk)

		// Get By Business Keys
		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_gcikdcdd.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_gcikdcdd, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_aacahlcc := User{Id: `20F3YUM8VBmJzJIt7BYUXvNh0BrmUyag`, Name: []byte(`zoqjVufiYIcKM74GXnQTfGj1sRf2qRJk`), payload: []byte(`{"ZImx7AFb":"P8NYAir4", "S5o6VjIF":"ke2fdu6O"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_aacahlcc.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_aacahlcc.Name = []byte(`1BWAgRg0nr0p5MKqSe3A2DvGtFZ34Xcx`)
		tbl_users_aacahlcc.payload = []byte(`{"oCGGdiAs":"EwDderFc", "crRqP4GX":"NQXM6RC9"}`)
		tbl_users_aacahlcc.Age = sql.NullInt32{Valid: true, Int32: 0}
		tbl_users_aacahlcc.DrivesCar = sql.NullBool{Valid: true, Bool: false}
		tbl_users_aacahlcc.Birthday = sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		tbl_users_aacahlcc.Registered = time.Now().UTC().Truncate(time.Second).Format(time.RFC3339) // Update By Primary Keys
		err = tbl_users_aacahlcc.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_aacahlcc.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_aacahlcc, gotByPk)

		// Update By Business Keys
		tbl_users_aacahlcc.Name = []byte(`3hmCviXCd5qrKSnRZby8qoQccxNrU8xK`)
		tbl_users_aacahlcc.payload = []byte(`{"JoZtAyk1":"IbYd1KPe", "MZrhDug0":"jFU8qq7s"}`)
		tbl_users_aacahlcc.Age = sql.NullInt32{Valid: true, Int32: 1}
		tbl_users_aacahlcc.DrivesCar = sql.NullBool{Valid: true, Bool: true}
		tbl_users_aacahlcc.Birthday = sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		tbl_users_aacahlcc.Registered = time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)
		err = tbl_users_aacahlcc.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_aacahlcc.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_aacahlcc, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_hhgaaglk := User{Id: `iZnvFCPpasoxixcAvpUFvzpkzTgIMUsE`, Name: []byte(`SbWLvTOyk81BscTGE5M5Na38XOEjzyo5`), payload: []byte(`{"qq8WhiCI":"JwUWv05I", "PFP5g4Xi":"NbPdw10i"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}, Registered: time.Now().UTC().Truncate(time.Second).Format(time.RFC3339)}
		err = tbl_users_hhgaaglk.insert(ctx, testDb)
		requireNoError(t, err)

		got := User{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_users_hhgaaglk.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_hhgaaglk, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := User{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_users_hhgaaglk.RawId)
		requireError(t, err)
	})

}
