// Generated by: github.com/tsladecek/gosqlgen

package mattngosqlite3

import (
	"database/sql"
	"fmt"
	"reflect"
	"testing"
)

func logf(t *testing.T, format string, args ...any) {
	t.Helper()

	t.Logf("%s: %s", t.Name(), fmt.Sprintf(format, args...))
}

func assertEqual(t *testing.T, a, b any) {
	t.Helper()

	if reflect.DeepEqual(a, b) {
		return
	}

	logf(t, "objects not equal\nExpected\n\t%+v\nReceived\n\t%+v", a, b)
	t.Fail()
}

func requireNoError(t *testing.T, err error) {
	t.Helper()

	if err != nil {
		logf(t, "error should be nil: %v", err)
		t.FailNow()
	}
}

func requireError(t *testing.T, err error) {
	t.Helper()

	if err == nil {
		logf(t, "error should not be nil")
		t.FailNow()
	}
}

func TestGoSQLGen_Address(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_egflfjae := User{Id: `OadpyPYHgcyrI0hAFi1MdJUBT54lF6OC`, Name: []byte(`AUYRNH7Qzo6LvaHQGkQtxeJBsc7jMKtn`), payload: []byte(`{"EKrioGhL":"cXQvaDIL", "GAU7PdSC":"fGaCCsZE"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "5EQloDNBuX4YdLijsYPbvm2MQ4J2svTF"}, Registered: `PMAJSGX7bDQYy5KH2iT5g8VCUxT1dlCw`}
		err = tbl_users_egflfjae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_adcbllbh := Country{Id: `lZN50E5aqtqQ2XXJExBfYs1MSOyCENea`, Name: `Yj173JTmXMXb8PIZf1uajtHmJU3WQqvl`, GPS: `Sf6S4jqACN0BjK8p6MaBmoi566ImjMNL`, Continent: `Asia`}
		err = tbl_countries_adcbllbh.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_acfiabjk := Address{Id: `ICskGujDWWNRFhoAPjXPXiMzA5qPYr2c`, Address: `iOw4p3pAjukgsCwPEe5YLwjehXxZs2zv`, UserId: tbl_users_egflfjae.RawId, CountryId: tbl_countries_adcbllbh.RawId}
		err = tbl_addresses_acfiabjk.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_acfiabjk.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByPk)

		// Get By Business Keys
		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_acfiabjk.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_acfiabjk, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_cjbgedae := User{Id: `HNjekTNLMAbWkQaS6zNzjcldKHCaYVo1`, Name: []byte(`KBWRioyItruo6Q2d0x8y37eCU3NUsJGQ`), payload: []byte(`{"Qc0sBTOP":"MD0pVtjY", "ZWE9q6Um":"Qtmlb4RP"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "TWPxAPq4IWF5gfHiXdHWKRYNMjeXpbc5"}, Registered: `m7Mx3R65A8kXxUV8i2BOPS71QHZ43J7t`}
		err = tbl_users_cjbgedae.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ajdabckf := Country{Id: `nGjz2kTvNoJ2CbsUlK5lHx8njguVbEO1`, Name: `YQYGjFG4mzjX2TOn4njZIqg0dCkFaljG`, GPS: `vIf1Gkx1iATrfBUZFpiXpGmxik5daFI7`, Continent: `Asia`}
		err = tbl_countries_ajdabckf.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_ajbjhhhl := Address{Id: `JHQvrqxfX7w0El40gU78oEhXvyV6w0vw`, Address: `VjQyi83CeT7jWSRBtpX5hqtpx3RC8YQB`, UserId: tbl_users_cjbgedae.RawId, CountryId: tbl_countries_ajdabckf.RawId}
		err = tbl_addresses_ajbjhhhl.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_cclbkefi := User{Id: `3uHkV6dITUCJ6NJtbYuWNjM7mozi4Jj7`, Name: []byte(`Lz7KbhHjV71epH2ixckscutaHpEiGBt7`), payload: []byte(`{"J5tY59TP":"TC63KdAs", "mxmmNxzz":"Jc04ytW8"}`), Age: sql.NullInt32{Valid: true, Int32: 0}, DrivesCar: sql.NullBool{Valid: true, Bool: false}, Birthday: sql.NullString{Valid: true, String: "PF20vWL0gXMisfZpIMZdQTcyIOhFzwCe"}, Registered: `PuTjGlOMfepfg5pcAHTE1T2GH3K2xVNU`}
		err = tbl_users_cclbkefi.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_cdlbgbgg := Country{Id: `VDkenb71KWWmWxIXQ7xWp84Jy85PwwgG`, Name: `juAibk8B33y6SRJHEGlkVQtwBZzNxdY7`, GPS: `j0M0IWTlMNl8Gtr6BoRmtP77Rv54GEJH`, Continent: `Europe`}
		err = tbl_countries_cdlbgbgg.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_ajbjhhhl.Address = `TbI6nbFV3zL8AgXTiizsWuo2VjeqAxlu`
		tbl_addresses_ajbjhhhl.UserId = tbl_users_cclbkefi.RawId
		tbl_addresses_ajbjhhhl.CountryId = tbl_countries_cdlbgbgg.RawId // Update By Primary Keys
		err = tbl_addresses_ajbjhhhl.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Address{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_ajbjhhhl.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_ajbjhhhl, gotByPk)

		// Update By Business Keys
		tbl_users_ccdkbhlb := User{Id: `iKjDqFE1YphSBdE3ojaIj25sKmIwB0v6`, Name: []byte(`gXzhDN4EQ7aFPalM34FBgs3vFxNATOYR`), payload: []byte(`{"JkRgmSi7":"wlwCPuW8", "iI8UN7EH":"pRKXAsUt"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "7l8cu0uqop2oGF0N8Vkteg0ZptXxK85s"}, Registered: `k5xJSM7vShEzd6wgS3VQR6kK6gxoRRg4`}
		err = tbl_users_ccdkbhlb.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_abkbcdfh := Country{Id: `kz4VxfcJrdz3WWkR73coJQ1VCQktZOhK`, Name: `etEZ7n7DzfIF2Ye3agmcoArCZxYnn1XK`, GPS: `UproNcpGSyldESUDk2iEesQGtnXTMvgv`, Continent: `Asia`}
		err = tbl_countries_abkbcdfh.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_ajbjhhhl.Address = `PlxHAW6C0t5oE7QAOOcCjNTkCdIlKRFc`
		tbl_addresses_ajbjhhhl.UserId = tbl_users_ccdkbhlb.RawId
		tbl_addresses_ajbjhhhl.CountryId = tbl_countries_abkbcdfh.RawId
		err = tbl_addresses_ajbjhhhl.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Address{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_ajbjhhhl.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_ajbjhhhl, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_cdcehdii := User{Id: `bppB6AOqWRIfkCU2YZoiwmUcTsQ1S1AC`, Name: []byte(`0K1jNWnLhRfWqUyJACIg3QuDVlRqfCKZ`), payload: []byte(`{"zYn4FEP6":"pWWrqR5W", "CHoPFFlA":"hHYTIqFL"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "lAxxoBcfhNvLENtn5a3GWzygQZZpc3j3"}, Registered: `O7qoK6oG3KUTMPUNrolSkoQyNfqBmCoQ`}
		err = tbl_users_cdcehdii.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_kfdbdalj := Country{Id: `goe5bYw8IIZDhE6UPqgDk3yOMKtYrKvt`, Name: `Q0xQMH3yPTtFUIIEFn0hTmHXjoJAaGwp`, GPS: `5puZQfEpOW7uZleeht48EQVWQIyFzucs`, Continent: `Asia`}
		err = tbl_countries_kfdbdalj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_eflkjlbf := Address{Id: `bbmrK0khCCLyK1HJ3j4qctho7FEgcLVN`, Address: `7CqwmX8RZ4tOWXPRaF6iHpCgZMm52vfw`, UserId: tbl_users_cdcehdii.RawId, CountryId: tbl_countries_kfdbdalj.RawId}
		err = tbl_addresses_eflkjlbf.insert(ctx, testDb)
		requireNoError(t, err)

		got := Address{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_eflkjlbf.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_eflkjlbf, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Address{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_eflkjlbf.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_AddressBook(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_iifabbjk := User{Id: `XiLzm1MBCNO6SMIst0lKpBiZmveCraLa`, Name: []byte(`pMSwU5G7ER6yofdgF0kYPGhu7ImOdcLs`), payload: []byte(`{"ATCtpgrn":"dmz3ft0n", "2u6kgqLB":"nYjJCrCn"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "KdKAaHj2If0HF8ohaMP53FvTWyT0fl5e"}, Registered: `5F6WSlZLUzf4Oeu23j644LwKd0Gojx4I`}
		err = tbl_users_iifabbjk.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_beedckea := Country{Id: `hIbkFQXu1x6wmpszDOMwxkvqvGqHt8G1`, Name: `YvBKSLa7Ng8KEvhYcnazlySVTIjQq2uF`, GPS: `wDXc1F4UctgtwvY0CCkB1kCimyept65o`, Continent: `Asia`}
		err = tbl_countries_beedckea.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_fggfgdkk := Address{Id: `PH0eKrMA2evzJvbA0DxTuyROyLVY5LAg`, Address: `xSGltRTSfzNmlX5GXseVW4WlQ6iE8LP2`, UserId: tbl_users_iifabbjk.RawId, CountryId: tbl_countries_beedckea.RawId}
		err = tbl_addresses_fggfgdkk.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_bjgiedfc := AddressBook{Id: `qodWnD5Qbah3Z35kGqMNXjt5iUtm1SYX`, AddressId: tbl_addresses_fggfgdkk.RawId}
		err = tbl_addresses_book_bjgiedfc.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_bjgiedfc.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_bjgiedfc, gotByPk)

		// Get By Business Keys
		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_bjgiedfc.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_bjgiedfc, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_dcjikbgl := User{Id: `bTocfLlWwD3KtvHnRQLGwIRaa1lhscy2`, Name: []byte(`mSDtFdv6OjVL4RelkdnBjX1aIPXa3lV7`), payload: []byte(`{"Nq1xC4VI":"oKev0kj0", "GPXzlR6R":"KyBsSw8d"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "an56i1QW5ECi3icSfFg0uS4mQJyJUitd"}, Registered: `DzSACOyJkwQjHR5k38U3mpRbtOwLj5uB`}
		err = tbl_users_dcjikbgl.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ieejbkfj := Country{Id: `qzj6N7WtmUtcLBG7hwNNqEJOt33D4oO8`, Name: `fqpDC8tqwGiIvQroNO6PI7pcbkxtaiTR`, GPS: `ZXxWXdzPQ1RvC6kIgjRTelNi6eCxwDKH`, Continent: `Asia`}
		err = tbl_countries_ieejbkfj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_hfbagkcb := Address{Id: `1rnmp4pDem56pFiYLXZYN4iEhsgdvfEG`, Address: `r1IyM8dF5irQjsEyGQ1SBkqhCIWVvNSK`, UserId: tbl_users_dcjikbgl.RawId, CountryId: tbl_countries_ieejbkfj.RawId}
		err = tbl_addresses_hfbagkcb.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_klhfifci := AddressBook{Id: `hnImdGcc5Eb8nWRABVuzp8vsj4Xv7rSB`, AddressId: tbl_addresses_hfbagkcb.RawId}
		err = tbl_addresses_book_klhfifci.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_hdjdcfcf := User{Id: `AnRoT75JJ8NJuZSCQG4CLtyHFsalpLqc`, Name: []byte(`FLBLERtRK0ne65khXZ14WMACsSZzdPq5`), payload: []byte(`{"Sp892wcg":"RBHvLfJY", "j5Y0wx7S":"l7xVt4de"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "I2Rj5wrnEAWtUHzOxVQmfHlgqU3SwI1i"}, Registered: `wcgHzcuGvbSJWX3dwo8VDV72UyMJCrsZ`}
		err = tbl_users_hdjdcfcf.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_lggbbbki := Country{Id: `PFxhALPum0nMJxip8V2eW5jwVk4MzQBS`, Name: `z42CFqVb7tntjOK5G74WweulSBBHKrFw`, GPS: `tHWMXzPMY8RFOckxCFZu40UaeGNOedNt`, Continent: `Asia`}
		err = tbl_countries_lggbbbki.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_eejkjdkj := Address{Id: `dn8xFJekHxj0407diuDBJj5QASiTOrtC`, Address: `y5CrcPoR2gigWzi7SO3CH2MfCYhBvupV`, UserId: tbl_users_hdjdcfcf.RawId, CountryId: tbl_countries_lggbbbki.RawId}
		err = tbl_addresses_eejkjdkj.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_klhfifci.AddressId = tbl_addresses_eejkjdkj.RawId // Update By Primary Keys
		err = tbl_addresses_book_klhfifci.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := AddressBook{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_klhfifci.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_klhfifci, gotByPk)

		// Update By Business Keys
		tbl_users_jflgffde := User{Id: `hggzd3ij7PTciYzVErdg2YhjoYcoI7NF`, Name: []byte(`7b1Bb5ivAAohOTthvl4jrOE8oRScbXqL`), payload: []byte(`{"wizZOp40":"FVqMzH9q", "nhGbqFJo":"ET6fFVPt"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "j1m0HpymrThD0fsbRHUanmiDGwEkFGjw"}, Registered: `bU0ZZ27du8qX7NX5DrTJIid3ewb6c5xQ`}
		err = tbl_users_jflgffde.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_ekieafck := Country{Id: `bzgos4AaTvAIMSuu35BokOUyHT0iwl3A`, Name: `EsKXJcSr0PavKdRi47OdEmSEpsL6rc3y`, GPS: `0Ty5pJqbDddR86ciem7ZMa7IBw3GxdMr`, Continent: `Asia`}
		err = tbl_countries_ekieafck.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_kddkdibf := Address{Id: `Q12mRgg2nxOwUxWxgoqB6aXoHZCAWV6y`, Address: `2TOG6ZqacmYArTkl83arrCyAU64DBSUw`, UserId: tbl_users_jflgffde.RawId, CountryId: tbl_countries_ekieafck.RawId}
		err = tbl_addresses_kddkdibf.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_addresses_book_klhfifci.AddressId = tbl_addresses_kddkdibf.RawId
		err = tbl_addresses_book_klhfifci.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := AddressBook{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_addresses_book_klhfifci.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_klhfifci, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_bfdhaafc := User{Id: `pKuNzBTyhvgmld1e5OhVOdQPdR3NqF5i`, Name: []byte(`TQvr5ag8I4js1bCCOvyeBCMlAxB5rOoM`), payload: []byte(`{"zyJcoNOf":"Sr3vn5iF", "96BEG5TX":"TzexGZH4"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "0Iv0hIpygljDXLp8NnM2eQchYtHMZKtE"}, Registered: `MTGPLCSyXTbxCQ8XTDqxwn6E8OgkxBus`}
		err = tbl_users_bfdhaafc.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_countries_bcfehibl := Country{Id: `Uv4HIMvdwWImS0Uhs7NAKgHlNeeVyV4L`, Name: `gzCjHbP7hFi0VMDiOBNOVaJWWjnIBir7`, GPS: `fjNE1D35GSvvxCUHYuZFDBgsXOQGSDwK`, Continent: `Asia`}
		err = tbl_countries_bcfehibl.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_kfhgdajj := Address{Id: `szmMt8LBbV8D1WyOI2L1CvXWt14OLFSR`, Address: `gYgPpNXkLJ4r0iy4irIgBAeALKvQ7T4x`, UserId: tbl_users_bfdhaafc.RawId, CountryId: tbl_countries_bcfehibl.RawId}
		err = tbl_addresses_kfhgdajj.insert(ctx, testDb)
		requireNoError(t, err)
		tbl_addresses_book_gkigldec := AddressBook{Id: `OsZBCZf2vjpEqfzYNRRsML8Gs2Ve2XId`, AddressId: tbl_addresses_kfhgdajj.RawId}
		err = tbl_addresses_book_gkigldec.insert(ctx, testDb)
		requireNoError(t, err)

		got := AddressBook{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_gkigldec.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_addresses_book_gkigldec, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := AddressBook{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_addresses_book_gkigldec.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_Country(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_iihglecg := Country{Id: `1z5WT0EJdjVDEMmXCD4vGMbac5X7kBX4`, Name: `vipEffuzIvVUwkV7EXuc7A5lLDXG28VY`, GPS: `OGpfLbUIpfc2WjTg724hPVekQT7yn3xf`, Continent: `Asia`}
		err = tbl_countries_iihglecg.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_iihglecg.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_iihglecg, gotByPk)

		// Get By Business Keys
		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_iihglecg.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_iihglecg, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_eedicgjg := Country{Id: `ZbWZytLqqzlYhn3Lbdl2tAri6oRjCITP`, Name: `IcLpaNMVaMgvZqqmECHwD4WkcN5LE6lG`, GPS: `3bHvFG1KPGuhXRV5zYq1kbUbU1AYIs7T`, Continent: `Asia`}
		err = tbl_countries_eedicgjg.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_countries_eedicgjg.Name = `mHcSkyFrwbi5wFhRyFLvt2OVtJXfVBhK`
		tbl_countries_eedicgjg.GPS = `1jcPmFat183wk1WuvMFy7L6XPfovFDdg`
		tbl_countries_eedicgjg.Continent = `Europe` // Update By Primary Keys
		err = tbl_countries_eedicgjg.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := Country{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_countries_eedicgjg.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_eedicgjg, gotByPk)

		// Update By Business Keys
		tbl_countries_eedicgjg.Name = `sQ3dAqivw5CPoPLFXQc6snoBjyFrgqys`
		tbl_countries_eedicgjg.GPS = `2VNvkddiQTqsyjyoaREeg4OGtoHvI56s`
		tbl_countries_eedicgjg.Continent = `Asia`
		err = tbl_countries_eedicgjg.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := Country{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_countries_eedicgjg.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_eedicgjg, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_countries_ijhgibkl := Country{Id: `sqGm1MP4Qqj4vbGT5lE8IzHITJtYrUIz`, Name: `OLPVNhDUQrwrmj5CPhS2sBw7FqFlZB7P`, GPS: `b1rzUUsceaddDy5nluGobZXUqCM5HqoD`, Continent: `Asia`}
		err = tbl_countries_ijhgibkl.insert(ctx, testDb)
		requireNoError(t, err)

		got := Country{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_countries_ijhgibkl.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_countries_ijhgibkl, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := Country{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_countries_ijhgibkl.RawId)
		requireError(t, err)
	})

}

func TestGoSQLGen_User(t *testing.T) {
	ctx := t.Context()
	var err error

	t.Run("getInsert", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_effhihha := User{Id: `yKAHPoNVC6aqpRNEMRB1jFHXdK5lM5Tn`, Name: []byte(`b41jJKI8t6V1VvLKxmcX5YTvuVwYLTLz`), payload: []byte(`{"x1zpK77s":"eHiRWdWA", "i1uN1d6C":"nJorizRp"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "SGCLggdFXuHrdIMpnhSDUM1cZ4J7TvhC"}, Registered: `TcoNwWaDgwfpWBm2CUzSsqPVEzY8cKf6`}
		err = tbl_users_effhihha.insert(ctx, testDb)
		requireNoError(t, err)

		// Get By Primary Keys
		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_effhihha.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_effhihha, gotByPk)

		// Get By Business Keys
		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_effhihha.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_effhihha, gotByBk)
		assertEqual(t, gotByPk, gotByBk)

	})

	t.Run("update", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_lkabaaeb := User{Id: `jbHbpTUyGuDnvTknrfBQSVBh8cfY8twW`, Name: []byte(`o825Tio120F3YUM8VBmJzJIt7BYUXvNh`), payload: []byte(`{"JMTvCa4Q":"yVy7xBCc", "rD2lTiog":"SBSp6fOg"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "D5DqEWBHE0VvOwDgcOqDZOImxt1sWnej"}, Registered: `57m4eezK6BAECupdM8jzFdiFCV80byos`}
		err = tbl_users_lkabaaeb.insert(ctx, testDb)
		requireNoError(t, err)

		tbl_users_lkabaaeb.Name = []byte(`Lxvri6P41BWAgRg0nr0p5MKqSe3A2DvG`)
		tbl_users_lkabaaeb.payload = []byte(`{"RsTBkiKj":"oCGGdiAs", "EwDderFc":"crRqP4GX"}`)
		tbl_users_lkabaaeb.Age = sql.NullInt32{Valid: true, Int32: 0}
		tbl_users_lkabaaeb.DrivesCar = sql.NullBool{Valid: true, Bool: false}
		tbl_users_lkabaaeb.Birthday = sql.NullString{Valid: true, String: "fJJ1iiak3hmCviXCd5qrKSnRZby8qoQc"}
		tbl_users_lkabaaeb.Registered = `cxNrU8xKPGDLsVbZZlGQ7Awo4amFFDqT` // Update By Primary Keys
		err = tbl_users_lkabaaeb.updateByPrimaryKeys(ctx, testDb)
		requireNoError(t, err)

		gotByPk := User{}
		err = gotByPk.getByPrimaryKeys(ctx, testDb, tbl_users_lkabaaeb.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_lkabaaeb, gotByPk)

		// Update By Business Keys
		tbl_users_lkabaaeb.Name = []byte(`kppU137EjaADy0AYsSh3t6NqCtUTyUP0`)
		tbl_users_lkabaaeb.payload = []byte(`{"XMY7sfkk":"h7txBO0K", "kmk5iwQN":"XQt3JfMb"}`)
		tbl_users_lkabaaeb.Age = sql.NullInt32{Valid: true, Int32: 1}
		tbl_users_lkabaaeb.DrivesCar = sql.NullBool{Valid: true, Bool: true}
		tbl_users_lkabaaeb.Birthday = sql.NullString{Valid: true, String: "vpUFvzpkzTgIMUsE0dMfTULl7Sw24xJL"}
		tbl_users_lkabaaeb.Registered = `Fkl4CXBqyKYFtRiPSbWLvTOyk81BscTG`
		err = tbl_users_lkabaaeb.updateByBusinessKeys(ctx, testDb)
		requireNoError(t, err)

		gotByBk := User{}
		err = gotByBk.getByBusinessKeys(ctx, testDb, tbl_users_lkabaaeb.Id)
		requireNoError(t, err)
		assertEqual(t, tbl_users_lkabaaeb, gotByBk)

	})

	t.Run("delete", func(t *testing.T) {
		testDb, close := getTestDB()
		defer close()
		tbl_users_lfaelhig := User{Id: `2ueJaymYycbO687padJq3HZZ3KFPQ6S5`, Name: []byte(`1DgJxkOtj8RiNxHB8ANvUACq1Vjs1mss`), payload: []byte(`{"lbD8Ud1J":"LQ9v3YNp", "pOKxE9mx":"k4HN4dbe"}`), Age: sql.NullInt32{Valid: true, Int32: 1}, DrivesCar: sql.NullBool{Valid: true, Bool: true}, Birthday: sql.NullString{Valid: true, String: "5UNkObUsRFQjfEuDJG0utaOLLnttAYum"}, Registered: `srDG3jNu7jFvGIuWbaqg3g6jZK6hVzJ5`}
		err = tbl_users_lfaelhig.insert(ctx, testDb)
		requireNoError(t, err)

		got := User{}
		err = got.getByPrimaryKeys(ctx, testDb, tbl_users_lfaelhig.RawId)
		requireNoError(t, err)
		assertEqual(t, tbl_users_lfaelhig, got)

		err = got.delete(ctx, testDb)
		requireNoError(t, err)
		gotAfterDelete := User{}
		err = gotAfterDelete.getByPrimaryKeys(ctx, testDb, tbl_users_lfaelhig.RawId)
		requireError(t, err)
	})

}
