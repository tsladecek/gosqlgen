package gosqlgen

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"maps"
	"os"
	"slices"
)

type Driver interface {
	Get(w io.Writer, table *Table, keys []*Column, methodName string) error
	Create(w io.Writer, table *Table, methodName string) error
	Update(w io.Writer, table *Table, keys []*Column, methodName string) error
	Delete(w io.Writer, table *Table, keys []*Column, methodName string) error
}

type MethodName string

const (
	MethodGetByPrimaryKeys     MethodName = "getByPrimaryKeys"
	MethodGetByBusinessKeys    MethodName = "getByBusinessKeys"
	MethodInsert               MethodName = "insert"
	MethodUpdateByPrimaryKeys  MethodName = "updateByPrimaryKeys"
	MethodUpdateByBusinessKeys MethodName = "updateByBusinessKeys"
	MethodDelete               MethodName = "delete"
)

const DBExecutorVarName = "testSqlDb"

func additionalImports(model *DBModel) ([]string, []string, error) {
	codeImports := []string{}
	testCodeImports := []string{}
	testCodeImportsMap := make(map[string]bool)
	for _, table := range model.Tables {
		if table.SkipTests {
			continue
		}

		for _, column := range table.Columns {
			if IsOneOfTypes(column.Type, []string{"time.Time"}) {
				testCodeImportsMap["time"] = true
			}
		}
	}

	if len(testCodeImportsMap) > 0 {
		testCodeImports = slices.Collect(maps.Keys(testCodeImportsMap))
	}

	return codeImports, testCodeImports, nil
}

func CreateTemplates(d Driver, model *DBModel, outputPath, outputTestPath string) error {
	writer := new(bytes.Buffer)
	testWriter := new(bytes.Buffer)
	ts, err := NewTestSuite()
	if err != nil {
		return fmt.Errorf("%w: when initializing test suite", err)
	}

	header := `// Generated by: github.com/tsladecek/gosqlgen`

	codeImports, testCodeImports, err := additionalImports(model)
	if err != nil {
		return fmt.Errorf("%w: when inferring additional imports", err)
	}

	methodsData := make(map[string]any)
	methodsData["Package"] = model.PackageName
	methodsData["Header"] = header
	methodsData["Imports"] = codeImports
	err = ts.templates.ExecuteTemplate(writer, "methodsHeader", methodsData)
	if err != nil {
		return fmt.Errorf("%w: when executing code header template", err)
	}

	testData := make(map[string]any)
	testData["Package"] = model.PackageName
	testData["Header"] = header
	testData["Imports"] = testCodeImports
	err = ts.templates.ExecuteTemplate(testWriter, "testHeader", testData)
	if err != nil {
		return fmt.Errorf("%w: when executing test code header template", err)
	}

	for _, table := range model.Tables {
		// GET
		pk, bk, err := table.PkAndBk()
		if err != nil {
			return fmt.Errorf("Failed to fetch primary and business keys: %w", err)
		}
		err = d.Get(writer, table, pk, string(MethodGetByPrimaryKeys))
		if err != nil {
			return fmt.Errorf("Failed to create GET template by primary keys for table %s: %w", table.Name, err)
		}

		if len(bk) > 0 {
			err = d.Get(writer, table, bk, string(MethodGetByBusinessKeys))
			if err != nil {
				return fmt.Errorf("Failed to create GET template by business keys for table %s: %w", table.Name, err)
			}
		}

		// CREATE
		err = d.Create(writer, table, string(MethodInsert))
		if err != nil {
			return fmt.Errorf("Failed to create insert template for table %s: %w", table.Name, err)
		}

		// UPDATE
		err = d.Update(writer, table, pk, string(MethodUpdateByPrimaryKeys))
		if err != nil {
			return fmt.Errorf("Failed to create update template for table %s by primary keys: %w", table.Name, err)
		}

		if len(bk) > 0 {
			err = d.Update(writer, table, bk, string(MethodUpdateByBusinessKeys))
			if err != nil {
				return fmt.Errorf("Failed to create update template for table %s by business keys: %w", table.Name, err)
			}
		}

		// DELETE
		err = d.Delete(writer, table, pk, string(MethodDelete))
		if err != nil {
			return fmt.Errorf("Failed to create delete template for table %s by primary keys: %w", table.Name, err)
		}

		if !table.SkipTests {
			err = ts.Generate(testWriter, table)
			if err != nil {
				return fmt.Errorf("Failed to create test template for table %s: %w", table.Name, err)
			}
		}
	}

	code, err := format.Source(writer.Bytes())
	if err != nil {
		return fmt.Errorf("%w: when formating code", err)
	}

	testCode, err := format.Source(testWriter.Bytes())
	if err != nil {
		return fmt.Errorf("%w: when formating test code", err)
	}

	err = os.WriteFile(outputPath, code, 0666)
	if err != nil {
		return fmt.Errorf("%w: when writing code to a file", err)
	}

	err = os.WriteFile(outputTestPath, testCode, 0666)
	if err != nil {
		return fmt.Errorf("%w: when writing test code to a file", err)
	}

	return nil
}
